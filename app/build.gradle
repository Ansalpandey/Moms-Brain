/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */


plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // // Use JUnit Jupiter for testing.
    // testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

    implementation 'net.dv8tion:JDA:5.0.0-beta.24'

    implementation("ch.qos.logback:logback-classic:1.5.6")

    // https://mvnrepository.com/artifact/org.apache.httpcomponents.client5/httpclient5
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3'
    
    // // https://mvnrepository.com/artifact/org.json/json
    // implementation 'org.json:json:20231013'

    // https://mvnrepository.com/artifact/com.google.api-client/google-api-client
    implementation 'com.google.api-client:google-api-client:1.34.0'


    // https://mvnrepository.com/artifact/com.google.apis/google-api-services-drive
    implementation 'com.google.apis:google-api-services-drive:v3-rev197-1.25.0'

    // https://mvnrepository.com/artifact/com.google.auth/google-auth-library-oauth2-http
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.28.0'



}

application {
    // Define the main class for the application.
    mainClass = 'io.github.dvyadav.momsbrain.Launcher'
}

task  createJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'io.github.dvyadav.momsbrain.Launcher'
    }
    archiveBaseName = 'MomsBrain'+Instant.now().getEpochSecond()
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// tasks.named('test') {
//     // Use JUnit Platform for unit tests.
//     useJUnitPlatform()
// }

task runPythonServer(type: Exec) {
    workingDir 'src/main/resources/io/github/dvyadav/momsbrain'
    
    // Conditional command based on OS
    def command = System.getProperty('os.name').toLowerCase().contains('win') ? 'python' : 'python3'
    
    commandLine command, 'python.py'
}

// Make sure 'run' task depends on 'runPythonServer' task
// run.dependsOn runPythonServer
